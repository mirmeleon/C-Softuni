using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace tests
{
    public class Program
    {
        static void Main()
        {
            var dragons = new Dictionary<string, SortedDictionary<string, int[]>>();
            int num = int.Parse(Console.ReadLine());

            for (int i = 0; i < num; i++)
            {
                var inp = Console.ReadLine();
               var tokens = inp.Split(new[] {' '}, StringSplitOptions.RemoveEmptyEntries);
                var type = tokens[0];
                var name = tokens[1];
                var dmg = tokens[2].Equals("null") ? 45 : int.Parse(tokens[2]);
                var heal = tokens[3].Equals("null") ? 250 : int.Parse(tokens[3]);
                var armor = tokens[4].Equals("null") ? 10 : int.Parse(tokens[4]);

                if (!dragons.ContainsKey(type))
                {
                    dragons[type] = new SortedDictionary<string, int[]>() {{name, new int[] {dmg, heal, armor}}};
                }
                else
                {
                    if (!dragons[type].ContainsKey(name)) //ako niama mlkia dic
                    {
                        dragons[type][name] = new int[] {dmg, heal, armor};
                    }
                    else
                    {
                        //ako veche imame takuv tip s takova ime mu prezapisvame resultatite
                        dragons[type][name] = new int[] { dmg, heal, armor };
                    }
                }
            }

            PrintDragons(dragons);

        }

        private static void PrintDragons(Dictionary<string, SortedDictionary<string, int[]>> dragons)
        {
          
            foreach (var dragoType in dragons)
            {
                var dragonInfo = new StringBuilder();
                double avrDmg = 0, avrHealt = 0, avrArmor = 0;

                foreach (var dragon in dragoType.Value)
                {
                     avrDmg += dragon.Value[0];
                     avrHealt += dragon.Value[1];
                     avrArmor += dragon.Value[2];

                    dragonInfo.Append($"-{dragon.Key} -> damage: {dragon.Value[0]}" +
                        $", health: {dragon.Value[1]}, armor: {dragon.Value[2]}\r\n");
                    
                }

                avrDmg /= dragoType.Value.Count;
                avrHealt /= dragoType.Value.Count;
                avrArmor /= dragoType.Value.Count;

                Console.WriteLine($"{dragoType.Key}::({avrDmg:f2}/{avrHealt:f2}/{avrArmor:f2})");
                Console.Write(dragonInfo.ToString());
            }
        }

      
    }
}
